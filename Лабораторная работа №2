ЛАБОРАТОРНАЯРАБОТА№1
Анализ требований

Цель работы: освоить методы и приемы анализа требований к программному обеспечению, выявления противоречий, неполнот и некорректных формулировок для создания качественной спецификации.

Теоретические сведения
Анализ требований для тестировщика — это не просто поверхностное чтение документации, а сложный процесс деконструкции и реконструкции информации. Профессиональный подход требует применения специальных аналитических техник, позволяющих выявлять скрытые проблемы до их превращения в дорогостоящие дефекты. 
Метод критического вопрошания превращает тестировщика в своеобразного "адвоката дьявола" для каждого требования. Вместо пассивного принятия формулировок, специалист последовательно подвергает их сомнению через серию уточняющих вопросов. Как именно система должна реагировать на одновременное нажатие двух функциональных кнопок? Что происходит при вводе нестандартных символов в поле для номера телефона? Как ведет себя интерфейс при резком изменении размеров окна браузера? Такой подход позволяет выявлять неочевидные сценарии, которые часто ускользают при поверхностном анализе.
Техника сценарного моделирования предполагает мысленное проигрывание всех возможных путей взаимодействия пользователя с системой. Опытный тестировщик не ограничивается основным "счастливым путем", а сознательно конструирует сложные, иногда даже абсурдные сценарии использования. Что если пользователь попытается оплатить товар, который только что удалил из корзины? Как система отреагирует на попытку отправить пустое сообщение в чате поддержки? Такие мысленные эксперименты часто выявляют логические пробелы в требованиях.
Метод трассировки зависимостей помогает тестировщику видеть систему как комплекс взаимосвязанных элементов. Каждое требование анализируется не изолированно, а в контексте его влияния на другие компоненты системы. Например, требование о добавлении двухфакторной аутентификации может повлечь изменения в процессах восстановления пароля, смены номера телефона и даже удаления аккаунта. Построение карты таких связей позволяет предвидеть побочные эффекты на ранних этапах. Прием "чтения между строк" направлен на выявление имплицитных требований — тех, которые не прописаны явно, но подразумеваются. Когда в требованиях указано "система должна отправлять уведомление о новом сообщении", тестировщик должен понять, что подразумевается не только  факт отправки, но и своевременность доставки, уникальность идентификатора сообщения, возможность отписки от уведомлений. Такие неозвученные ожидания часто становятся источником конфликтов на поздних этапах проекта. 
Техника персонализации требований предполагает их анализ с позиции различных категорий пользователей. Как воспримет эту функцию новичок? Какие сложности могут возникнуть у пользователя с ограниченными техническими навыками? Не создает ли предложенное решение проблем для людей с ограниченными возможностями? Такой подход особенно важен при работе с требованиями к пользовательским интерфейсам.
Метод временного анализа рассматривает требования в динамике их реализации. Тестировщик оценивает, как система должна вести себя при первом использовании функции, при повторном обращении, после длительного перерыва. Особое внимание уделяется сценариям перехода между разными состояниями системы — как будет вести себя корзина покупок, если пользователь добавил товар до авторизации, а завершает покупку после входа в аккаунт.
Стратегия "разрушения предположений" сознательно подвергает сомнению базовые допущения, заложенные в требованиях. Что если интернет-соединение пропадет в момент подтверждения платежа? Как поведет себя система, если время на сервере окажется некорректным? Такие проверки особенно важны для критически важных систем, где цена ошибки чрезвычайно высока.
Профессиональный анализ требований — это всегда баланс между структурным подходом и творческим мышлением. С одной стороны, тестировщик использует четкие методологии и шаблоны, с другой — применяет интуицию и воображение для моделирования реальных ситуаций использования. Такой комплексный подход позволяет выявлять до 60% потенциальных проблем на этапе проектирования, существенно снижая стоимость исправления дефектов и повышая общее качество продукта.
1. Проверка на критерии SMART
Требование должно быть:
- Конкретным (Specific): "Кнопка 'Купить' должна быть оранжевой" вместо "Интерфейс должен быть ярким".
- Измеримым (Measurable): "Обработка платежа ≤3 сек при 1000 RPS".
- Достижимым (Achievable): Реалистичность с учетом технологий.
- Релевантным (Relevant): Соответствие бизнес-целям.
- Ограниченным по времени (Time-bound): "Функция должна работать к Чёрной пятнице".
2. Техника "5 вопросов"
Для каждого требования задайте:
1. Что именно нужно тестировать?
2. Где это будет работать? (браузер, мобильное приложение)
3. Когда система должна/не должна это делать?
4. Как обрабатываются ошибки?
5. Почему это важно для пользователя?
Пример: Для требования "Поиск должен поддерживать фильтры":
- Что: Поля "Цена", "Бренд", "Рейтинг".
- Где: Только в веб-версии (в мобильной — упрощенный поиск).
- Когда: Фильтры недоступны для категории "Акции".
3. Матрица трассируемости
Связывает требования с:
- Тест-кейсами,
- Рисками,
- Результатами тестирования.

ID требования   Тест-кейс                   Приоритет    Статус
FTR-123         Проверка фильтра по цене    High         Passed

   Типичные ошибки в требованиях и как их находить

Работа с требованиями напоминает профессиональную реставрацию древнего манускрипта — под видимым слоем текста скрываются многочисленные смысловые пласты, а неявные дефекты могут исказить весь проект. Опытные тестировщики вырабатывают особую чувствительность к "шумам" в требованиях, позволяющую выявлять проблемы до их трансформации в критические дефекты.
Синдром пропущенных альтернатив проявляется, когда требования описывают только основной сценарий использования, игнорируя возможные варианты и исключения. Например, спецификация может детально описывать процесс успешной оплаты заказа, но умалчивать о поведении системы при отказе банковской операции. Тестировщик выявляет такие пробелы через технику "ветвления сценариев" — мысленно прорабатывая каждую точку принятия решения в процессе и задаваясь вопросом "что если...". Особое внимание уделяется временным характеристикам (что происходит при истечении таймаута?) и граничным условиям (как обрабатывается минимально допустимое значение?).
Феномен расфокусированных спецификаций возникает, когда требования смешивают различные уровни абстракции — технические детали реализации с бизнес-правилами, интерфейсные решения с архитектурными ограничениями. Это создает эффект "размытого зрения", когда истинные потребности пользователя теряются среди технических предписаний. Для выявления таких проблем тестировщики применяют метод "слоеной фильтрации" — последовательно отделяя бизнес-цели от способов их достижения, сущности от их атрибутов, статические свойства от динамического поведения.
Эффект иллюзорной точности характерен для требований, которые выглядят конкретными, но при детальном рассмотрении оказываются семантически пустыми. Формулировки типа "система должна работать быстро" или "интерфейс должен быть удобным" создают ложное ощущение определенности. Тестировщик вскрывает эту проблему через технику "квантификации абстракций" — требуя перевода качественных характеристик в измеримые показатели (например, "быстро" = время отклика не более 2 секунд при 1000 одновременных подключений).
Парадокс нефункциональной слепоты проявляется в игнорировании системных характеристик продукта — производительности, безопасности, масштабируемости. Часто это связано с тем, что такие требования не связаны напрямую с пользовательскими сценариями. Для их выявления тестировщики строят "матрицу скрытых качеств", где каждое функциональное требование проверяется на соответствие стандартам надежности, совместимости и другим нефункциональным аспектам.
Синдром разорванной трассируемости возникает, когда теряется связь между бизнес-целями и техническими требованиями. Тестировщик обнаруживает эту проблему через метод "обратного прослеживания" — от каждого технического требования к породившему его бизнес-потребностям.Если цепочка рассуждений не восстанавливается, значит, в проекте появилось избыточное или противоречивое требование.
Феномен контекстной глухоты характерен для требований, разработанных без учета реальных условий эксплуатации. Например, система, предназначенная для мобильных пользователей, может не учитывать проблемы с нестабильным интернет-соединением. Тестировщики выявляют такие пробелы через технику "иммерсивного моделирования" — воссоздавая в тестовых сценариях реальные условия использования (перебои связи, низкий заряд батареи, параллельное использование других приложений).
Эффект кристаллизованных допущений возникает, когда базовые предположения проектировщиков превращаются в негласные аксиомы, не подвергаемые сомнению. Тестировщик вскрывает эти скрытые предпосылки через метод "радикального вопрошания" — последовательно подвергая сомнению каждое утверждение и требуя доказательств его обоснованности.
Профессиональное выявление дефектов требований требует от тестировщика особого мышления — одновременно системного и критического, методичного и творческого. Это процесс постоянного балансирования между буквой документации и духом пользовательских потребностей, между жесткими стандартами и гибкостью реального мира.
Развитие этого навыка превращает тестировщика из простого верификатора в полноправного архитектора качества, способного влиять на продукт на самых ранних и поэтому наиболее важных этапах его создания.
1. Неполнота
Пример: Требование: "Админ может блокировать пользователей".
Что упущено:
- Как админ находит пользователя?
- Нужно ли уведомление?
- Можно ли разблокировать?
Метод выявления: Проверка всех пользовательских сценариев через BDD (Behavior-Driven Development):



2. Противоречия
Пример:
- Требование 1: "Форма отправляется при нажатии Enter".
- Требование 2: "Enter переносит курсор на новую строку".
Решение: Составить таблицу конфликтов и согласовать с аналитиком.
3. Нетестируемость
Плохо: "Интерфейс должен быть удобным".
Хорошо: "95% пользователей должны находить кнопку 'Купить' за ≤3 секунды".

Инструменты для работы с требованиями
1. Confluence/Jira – документирование и трассировка.
2. MindMeister – визуализация связей между требованиями.
3. ReqView – управление версиями требований.
4. Selenium – автоматизация тестов на основе требований.
Кейс: команда Spotify использует Jira для связи User Stories с тестами,
что сократило количество пропущенных багов на 30%.
Требования как живой процесс
1. Участвуйте в обсуждении требований на ранних этапах.
2. Задавайте уточняющие вопросы – не молчите!
3. Документируйте все допущения.
4. Обновляйте тесты при изменении требований.
"Хороший тестировщик не просто проверяет код — он проверяет,
решает ли код правильную проблему". – Майкл Болтон   

Задание: На основе набора требований, сформулированных в ЛР №1 , проведите их всесторонний анализ.

Содержание отчета:
1.     Название и предназначение программного продукта;
2.     Краткое описание контекста (предметной области);
3.   Анализтребований программного продукта;
4.     Выводы по работе.
